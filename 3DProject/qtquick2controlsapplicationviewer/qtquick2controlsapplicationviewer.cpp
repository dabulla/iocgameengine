// checksum 0x7cc2 version 0x90001
/*
  This file was generated by the Qt Quick 2 Application wizard of Qt Creator.
  QtQuick2ControlsApplicationViewer is a convenience class.
  QML paths are handled here.
  It is recommended not to modify this file, since newer versions of Qt Creator
  may offer an updated version of it.
*/
#include "qtquick2controlsapplicationviewer.h"
#include "qtquickinputeventswindow.h"

#include <QCoreApplication>
#include <QDir>
#include <QQmlComponent>
#include <QQmlEngine>
#include <QQuickView>
#include <QOpenGLContext>
#include <QTime>
#include <QTimer>

#include "engine.h"

class QtQuick2ApplicationViewerPrivate
{
    QString mainQmlFile;
    QQmlEngine engine;
    QtQuickInputEventsWindow *window;

    QTime m_time;

    QtQuick2ApplicationViewerPrivate() : window(0)
    {}

    ~QtQuick2ApplicationViewerPrivate()
    {
        delete window;
    }

    static QString adjustPath(const QString &path);

    friend class QtQuick2ControlsApplicationViewer;
private slots:
    void resize()
    {

    }
};

QString QtQuick2ApplicationViewerPrivate::adjustPath(const QString &path)
{
#if defined(Q_OS_MAC)
    if (!QDir::isAbsolutePath(path))
        return QStringLiteral("%1/../Resources/%2")
                .arg(QCoreApplication::applicationDirPath(), path);
#elif defined(Q_OS_BLACKBERRY)
    if (!QDir::isAbsolutePath(path))
        return QStringLiteral("app/native/%1").arg(path);
#elif !defined(Q_OS_ANDROID)
    QString pathInInstallDir =
            QStringLiteral("%1/../%2").arg(QCoreApplication::applicationDirPath(), path);
    if (QFileInfo(pathInInstallDir).exists())
        return pathInInstallDir;
    pathInInstallDir =
            QStringLiteral("%1/%2").arg(QCoreApplication::applicationDirPath(), path);
    if (QFileInfo(pathInInstallDir).exists())
        return pathInInstallDir;
#endif
    return path;
}

QtQuick2ControlsApplicationViewer::QtQuick2ControlsApplicationViewer()
    : d(new QtQuick2ApplicationViewerPrivate())
{

}

QtQuick2ControlsApplicationViewer::~QtQuick2ControlsApplicationViewer()
{
    delete d;
}

void QtQuick2ControlsApplicationViewer::setMainQmlFile(const QString &file)
{
    d->mainQmlFile = QtQuick2ApplicationViewerPrivate::adjustPath(file);

    QQmlComponent component(&d->engine);

    QObject::connect(&d->engine, SIGNAL(quit()), QCoreApplication::instance(), SLOT(quit()));

#ifdef Q_OS_ANDROID
    component.loadUrl(QUrl(QStringLiteral("assets:/")+d->mainQmlFile));
#else
    component.loadUrl(QUrl::fromLocalFile(d->mainQmlFile));
#endif

    if (!component.isReady())
        qWarning("%s", qPrintable(component.errorString()));

    d->window = qobject_cast<QtQuickInputEventsWindow *>(component.create());
    if (!d->window)
        qFatal("Error: Your root item has to be a Window.");

    d->engine.setIncubationController(d->window->incubationController());
}

void QtQuick2ControlsApplicationViewer::addImportPath(const QString &path)
{
    d->engine.addImportPath(QtQuick2ApplicationViewerPrivate::adjustPath(path));
}

void QtQuick2ControlsApplicationViewer::show()
{
    if (d->window)
        d->window->show();
}

void QtQuick2ControlsApplicationViewer::emitResize(int width, int height)
{
    resize(width, height);
//    emit resize(width, height);
}

void QtQuick2ControlsApplicationViewer::emitUpdate(float tickcount)
{
    update(tickcount);
//    emit update(tickcount);
}

void QtQuick2ControlsApplicationViewer::emitRender()
{
    render();
//    emit render();
}

void QtQuick2ControlsApplicationViewer::Activated()
{
    d->window->setTitle( GetEngine().GetString("title", "[add title]") );
    //Make the UI adopt to the Window on resize
    //d->window->setResizeMode(QQuickView::SizeRootObjectToView);
    // Tell Qt we will use OpenGL for this window
    //d->window->setSurfaceType( OpenGLSurface );
    //Qt should not clear the screen before rendering (this clear our renderings)
    d->window->setClearBeforeRendering(false);
    //root object should be transparent. This affects the glClearColor (verification needed)
    d->window->setColor(QColor(Qt::transparent));

    QSurfaceFormat format;
    format.setVersion( 4, 2 ); //Set OpenGL 4.2
    //Enable AntiAliasing
    format.setSamples( 4 );
    //Make sure there is a depth and alpha buffer
    format.setDepthBufferSize( 24 );
    format.setAlphaBufferSize(8);
    // CompatibilityProfile is used so QtQuick works together with OpenGL 4.2
    // OpenGL 4.2 is used to use nvidia nsight in its current version (only 4.2 supported)
    // Qt makes certain OpenGL-Calls that nsight does not like. Even if the UI is completely disabled, nsight does not work yet.
    format.setProfile( QSurfaceFormat::CompatibilityProfile );
    d->window->setFormat( format );

    //d->window->openglContext()->makeCurrent(d->window);
    d->m_time.start();

    d->window->resize( GetEngine().GetInt("width", 1366), GetEngine().GetInt("height", 768) );

    
    connect( this, SIGNAL( widthChanged( int ) ), this, SLOT( emitResize() ) );
    connect( this, SIGNAL( heightChanged( int ) ), this, SLOT( emitResize() ) );
    
    // This timer drives the scene updates
    QTimer* timer = new QTimer( this );
    connect( timer, SIGNAL( timeout() ), this, SLOT( update() ), Qt::DirectConnection );
    timer->start( 1 );

	//Use "beforeRendering" to render a scene under the ui.
    connect( this, SIGNAL( beforeRendering() ), this, SLOT( render() ), Qt::DirectConnection );

	//Initialize all stuff that need OpenGL+QtQuickUI.
    //connect(this, SIGNAL(sceneGraphInitialized()), this, SLOT(onSceneGraphInitialized()), Qt::DirectConnection );
}

void QtQuick2ControlsApplicationViewer::Deactivated()
{

}

const QOpenGLContext *QtQuick2ControlsApplicationViewer::GetOpenGlContext() const
{
    return d->window->openglContext();
}
